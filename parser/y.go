// Code generated by goyacc par.y. DO NOT EDIT.

//line par.y:2
package parser

import __yyfmt__ "fmt"

//line par.y:2

import (
	"MIA-P1/actions"
	"bufio"
	"bytes"
	"fmt"
	"io"
	"os"
)

var newDisk actions.Disk = actions.Disk{}
var newPartition actions.Partition = actions.Partition{}
var newFDisk actions.FDISK = actions.FDISK{}
var newMount actions.Mount = actions.Mount{}

type node struct {
	name     string
	children []node
}

func (n node) String() string {
	buf := new(bytes.Buffer)
	n.print(buf, " ")
	return buf.String()
}

func (n node) print(out io.Writer, indent string) {
	fmt.Fprintf(out, "\n%v%v", indent, n.name)
	for _, nn := range n.children {
		nn.print(out, indent+"  ")
	}
}

func Node(name string) node           { return node{name: name} }
func (n node) append(nn ...node) node { n.children = append(n.children, nn...); return n }

//line par.y:40
type yySymType struct {
	yys   int
	node  node
	token string
}

const arrow = 57346
const add = 57347
const delete = 57348
const digit = 57349
const digits = 57350
const diskName = 57351
const equals = 57352
const exec = 57353
const fit = 57354
const fdisk = 57355
const greater = 57356
const hyphen = 57357
const idn = 57358
const id = 57359
const less = 57360
const mia_file = 57361
const mount = 57362
const mount_name = 57363
const mbr = 57364
const mkfs = 57365
const mkdisk = 57366
const number = 57367
const negNumber = 57368
const name = 57369
const path = 57370
const pause = 57371
const rmdisk = 57372
const size = 57373
const tpe = 57374
const unit = 57375
const unmount = 57376
const read = 57377
const route = 57378
const quote = 57379

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"arrow",
	"add",
	"delete",
	"digit",
	"digits",
	"diskName",
	"equals",
	"exec",
	"fit",
	"fdisk",
	"greater",
	"hyphen",
	"idn",
	"id",
	"less",
	"mia_file",
	"mount",
	"mount_name",
	"mbr",
	"mkfs",
	"mkdisk",
	"number",
	"negNumber",
	"name",
	"path",
	"pause",
	"rmdisk",
	"size",
	"tpe",
	"unit",
	"unmount",
	"read",
	"route",
	"quote",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line par.y:226

// Run exported
func Run() {
	fi := bufio.NewReader(os.NewFile(0, "stdin"))
	yyDebug = 0
	yyErrorVerbose = true
	for {
		var eqn string
		var ok bool

		fmt.Printf(">> ")
		if eqn, ok = input(fi); ok {
			l := newLexer(bytes.NewBufferString(eqn), os.Stdout, "file.name")
			yyParse(l)
		} else {
			break
		}
	}

}

func input(fi *bufio.Reader) (string, bool) {
	s, err := fi.ReadString('\n')
	if err != nil {
		return "", false
	}
	return s, true
}

//line yacctab:1
var yyExca = [...]int{
	-1, 1,
	1, -1,
	-2, 0,
}

const yyPrivate = 57344

const yyLast = 107

var yyAct = [...]int{
	59, 15, 104, 18, 53, 52, 103, 102, 101, 94,
	13, 51, 86, 19, 16, 83, 79, 99, 98, 20,
	17, 97, 96, 81, 14, 21, 55, 56, 58, 33,
	54, 50, 49, 45, 44, 105, 29, 43, 47, 46,
	39, 38, 41, 63, 24, 107, 93, 90, 89, 69,
	88, 87, 85, 80, 57, 95, 40, 100, 34, 30,
	25, 35, 48, 31, 27, 42, 26, 84, 37, 92,
	91, 82, 106, 78, 77, 76, 75, 74, 73, 72,
	71, 70, 68, 67, 66, 65, 64, 62, 61, 60,
	36, 3, 1, 12, 22, 2, 10, 32, 9, 8,
	28, 7, 6, 5, 11, 23, 4,
}

var yyPact = [...]int{
	-10, -1000, -10, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, 45, 51, 49, 44, 48, 43, 46,
	-1000, 86, -1000, 45, -1000, 13, 40, 14, 44, -1000,
	6, 10, 43, -1000, -1, 37, -8, -1000, 85, 84,
	-1000, 83, -1000, 82, 81, 80, 79, 78, -1000, 77,
	76, 75, 74, 73, 72, 71, 70, 69, -1000, -1000,
	-21, 36, -13, -1000, 64, -22, 58, 35, -25, -1000,
	34, 33, 31, 30, 63, 62, 29, -28, 39, -14,
	-1000, -1000, -1000, -15, -1000, -1000, -18, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -19, 42, -29, -30, -31, -35,
	3, -1000, -1000, -1000, -1000, 68, 28, -1000,
}

var yyPgo = [...]int{
	0, 106, 105, 44, 104, 103, 102, 101, 100, 36,
	99, 98, 97, 29, 96, 91, 95, 93, 92, 0,
}

var yyR1 = [...]int{
	0, 18, 16, 16, 15, 15, 15, 15, 15, 15,
	15, 15, 15, 4, 17, 6, 7, 8, 8, 9,
	9, 9, 9, 1, 2, 2, 3, 3, 5, 11,
	12, 12, 13, 13, 13, 13, 13, 13, 13, 13,
	10, 14, 14, 19,
}

var yyR2 = [...]int{
	0, 1, 1, 2, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 3, 5, 2, 1, 3, 4,
	6, 4, 4, 2, 1, 3, 6, 4, 3, 2,
	1, 3, 4, 4, 4, 4, 4, 4, 4, 6,
	7, 5, 9, 0,
}

var yyChk = [...]int{
	-1000, -18, -16, -15, -1, -5, -6, -7, -10, -11,
	-14, -4, -17, 20, 34, 11, 24, 30, 13, 23,
	29, 35, -15, -2, -3, 15, 15, 15, -8, -9,
	15, 15, -12, -13, 15, 15, 4, -3, 28, 27,
	16, 28, -9, 31, 28, 27, 33, 28, -13, 33,
	32, 12, 6, 5, 31, 27, 28, 17, 36, -19,
	4, 4, 4, -19, 4, 4, 4, 4, 4, -19,
	4, 4, 4, 4, 4, 4, 4, 4, 4, 37,
	17, 36, 7, 37, 9, 17, 37, 17, 17, 17,
	17, 7, 7, 17, 37, 16, 36, 36, 36, 36,
	15, 37, 37, 37, 37, 32, 4, 17,
}

var yyDef = [...]int{
	0, -2, 1, 2, 4, 5, 6, 7, 8, 9,
	10, 11, 12, 0, 0, 0, 0, 0, 0, 0,
	13, 0, 3, 23, 24, 0, 0, 0, 16, 17,
	0, 0, 29, 30, 0, 0, 0, 43, 0, 0,
	28, 0, 43, 0, 0, 0, 0, 0, 43, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 14, 25,
	0, 0, 0, 18, 0, 0, 0, 0, 0, 31,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	27, 15, 19, 0, 21, 22, 0, 32, 33, 34,
	35, 36, 37, 38, 0, 41, 0, 0, 0, 0,
	0, 26, 20, 40, 39, 0, 0, 42,
}

var yyTok1 = [...]int{
	1,
}

var yyTok2 = [...]int{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37,
}

var yyTok3 = [...]int{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := yyPact[state]
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && yyChk[yyAct[n]] == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || yyExca[i+1] != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := yyExca[i]
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = yyTok1[0]
		goto out
	}
	if char < len(yyTok1) {
		token = yyTok1[char]
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = yyTok2[char-yyPrivate]
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = yyTok3[i+0]
		if token == char {
			token = yyTok3[i+1]
			goto out
		}
	}

out:
	if token == 0 {
		token = yyTok2[1] /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = yyPact[yystate]
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = yyAct[yyn]
	if yyChk[yyn] == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = yyDef[yystate]
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && yyExca[xi+1] == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = yyExca[xi+0]
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = yyExca[xi+1]
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = yyPact[yyS[yyp].yys] + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = yyAct[yyn] /* simulate a shift of "error" */
					if yyChk[yystate] == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= yyR2[yyn]
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = yyR1[yyn]
	yyg := yyPgo[yyn]
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = yyAct[yyg]
	} else {
		yystate = yyAct[yyj]
		if yyChk[yystate] != -yyn {
			yystate = yyAct[yyg]
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 13:
		yyDollar = yyS[yypt-1 : yypt+1]
//line par.y:159
		{
			actions.PauseAction()
		}
	case 14:
		yyDollar = yyS[yypt-3 : yypt+1]
//line par.y:161
		{
			actions.ReadFile(yyDollar[3].token)
		}
	case 15:
		yyDollar = yyS[yypt-5 : yypt+1]
//line par.y:163
		{
			actions.GetFile(yyDollar[5].token)
		}
	case 16:
		yyDollar = yyS[yypt-2 : yypt+1]
//line par.y:165
		{
			newDisk.CreateDisk()
			newDisk = actions.Disk{}
		}
	case 19:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:173
		{
			newDisk.SetDiskSize(yyDollar[4].token)
		}
	case 20:
		yyDollar = yyS[yypt-6 : yypt+1]
//line par.y:174
		{
			newDisk.SetDiskRoute(yyDollar[5].token)
		}
	case 21:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:175
		{
			newDisk.SetDiskName(yyDollar[4].token)
		}
	case 22:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:176
		{
			newDisk.SetDiskUnit(yyDollar[4].token)
		}
	case 23:
		yyDollar = yyS[yypt-2 : yypt+1]
//line par.y:181
		{
			newMount.SetMount()
			newMount = actions.Mount{}
		}
	case 26:
		yyDollar = yyS[yypt-6 : yypt+1]
//line par.y:189
		{
			newMount.SetMountRoute(yyDollar[5].token)
		}
	case 27:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:190
		{
			newMount.SetMountName(yyDollar[4].token)
		}
	case 28:
		yyDollar = yyS[yypt-3 : yypt+1]
//line par.y:192
		{
			yyVAL.node = Node(yyDollar[1].token)
		}
	case 29:
		yyDollar = yyS[yypt-2 : yypt+1]
//line par.y:194
		{
			newFDisk.CreatePartition()
			newPartition = actions.Partition{}
			newFDisk = actions.FDISK{}
		}
	case 32:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:204
		{
			newFDisk.SetFUnit(yyDollar[4].token)
		}
	case 33:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:205
		{
			newFDisk.SetPartitionType(yyDollar[4].token)
		}
	case 34:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:206
		{
			newFDisk.SetPartitionFit(yyDollar[4].token)
		}
	case 35:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:207
		{
			newFDisk.SetDeleteOption(yyDollar[4].token)
		}
	case 36:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:208
		{
			newFDisk.SetAddOption(yyDollar[4].token)
		}
	case 37:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:209
		{
			newFDisk.SetPSize(yyDollar[4].token)
		}
	case 38:
		yyDollar = yyS[yypt-4 : yypt+1]
//line par.y:210
		{
			newFDisk.SetPartitionName(yyDollar[4].token)
		}
	case 39:
		yyDollar = yyS[yypt-6 : yypt+1]
//line par.y:211
		{
			newFDisk.SetPartitionRoute(yyDollar[5].token)
		}
	case 40:
		yyDollar = yyS[yypt-7 : yypt+1]
//line par.y:215
		{
			actions.RemoveDisk(yyDollar[6].token)
		}
	case 41:
		yyDollar = yyS[yypt-5 : yypt+1]
//line par.y:219
		{
			yyVAL.node = Node(yyDollar[1].token)
		}
	case 42:
		yyDollar = yyS[yypt-9 : yypt+1]
//line par.y:220
		{
			yyVAL.node = Node(yyDollar[1].token)
		}
	}
	goto yystack /* stack new state and value */
}
